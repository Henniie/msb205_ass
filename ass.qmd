---
title: "assignment bolig"
format: html
editor: visual
---

# 1.Last ned *House Sales King County, USA* fra Kaggle

## i. Sjekk definisjonen på de ulike variablene

## ii. Les .csv filen med *House Sales King County* inn i R

```{r}

# Laster inn data
kc_house_data <- read.csv("MapsData/kc_house_data.csv")

# head data
head(kc_house_data)
```

## iii. Sorter salgene «descending» etter dato, siste først (dvs. mai 2015, april 2015 osv.)

```{r}
install.packages("dplyr")
library(dplyr)

# Konverter date kolonnen til datoformat
kc_house_data$date <- as.Date(kc_house_data$date, format = "%Y%m%dT000000")

# Sorter salgene etter dato
kc_house_data_sorted <- kc_house_data %>%
  arrange(desc(date))

# head
head(kc_house_data_sorted)

```

## iv. Bruk `dplyr::distinct()` til å velge siste salg der vi har multiple salg av samme eiendom.

```{r}

# Sorter datasettet etter dato og fjern duplikater basert på `id`
latest_sales <- kc_house_data %>%
  arrange(desc(date)) %>%
  distinct(id, .keep_all = TRUE)

# head
head(latest_sales)

```

## v. Bruk `st_as_sf()` til å konvertere house data til et sf objekt vha. long lat og sett til geografisk projeksjon, dvs EPSG:4326.

```{r}
install.packages("sf")
library(sf)
```

```{r}

# Konverter dataene
kc_house_sf <- st_as_sf(kc_house_data, coords = c("long", "lat"), crs = 4326)

# print
print(kc_house_sf)

```

## vi. Konverter dette sf objektet så til projeksjonen EPSG:2926.

```{r}
# Konverter sf objektet til projeksjonen EPSG:2926
kc_house_sf_2926 <- st_transform(kc_house_sf, crs = 2926)

# print
print(kc_house_sf_2926)

```

## vii. Bruk koordinatene fra Seattles wikipedia-side (øvre høyre hjørne, klikk linken så får dere koordinatene i desimal form) og sett dette punktet som CBD for Seattle.

```{r}

# Definer koordinatene for Seattles CBD
seattle_cbd_coords <- data.frame(
  longitude = -122.3321,
  latitude = 47.6062
)

# Konverter til sf-objekt med geografisk projeksjon (EPSG:4326)
seattle_cbd_sf <- st_as_sf(seattle_cbd_coords, coords = c("longitude", "latitude"), crs = 4326)

```

## viii. Konverter dette punktet til EPSG:2926. Finn avstanden mellom dette punktet og samtlige hus i datasettet i luftlinje. Konverter avstandene til km og legg dem i variabelen dest_CBD i kartet med husdata.

```{r}
# konverterer til EPSG:2926
seattle_cbd_sf_2926 <- st_transform(seattle_cbd_sf, crs = 2926)

# Beregner avstanden i meter mellom Seattle CBD og samtlige hus
kc_house_sf_2926 <- kc_house_sf_2926 %>%
  mutate(dest_CBD = st_distance(geometry, seattle_cbd_sf_2926))

# Konverter avstand fra meter til kilometer
kc_house_sf_2926 <- kc_house_sf_2926 %>%
  mutate(dest_CBD = as.numeric(dest_CBD) / 1000)  # Konverter til kilometer

# head
head(kc_house_sf_2926)

```

# 2.Last ned *WADOH Environmental Health Disparities Index Calculated for King County*

## i. Les inn .shp filen WADOH King County.

```{r}

library(sf)

# Laster shapefilen
kc_wadoh_map <- st_read("MapsData/WADOH_Environmental_Health_Disparities_Index_Calculated_for_King_County___wadohehdindex_area.shp")

# sjekker kolonnene
names(kc_wadoh_map)




```

## ii. Plukk ut variablene angitt tidligere i oppgaven.

```{r}

# Velger spesifikke variabler fra kc_wadoh_map
kc_wadoh_map <- kc_wadoh_map %>% 
  select(
    GEO_ID_TRT,
    EHD_percen,   # Environmental Health Index, weighted score many vars
    linguist_2,   # Pop. age 5+ speaking English less than "very well"
    poverty_pe,   # Percentage people living in poverty
    transporta,   # % of income spent on transportation median family in tract
    unemploy_2,   # Percentage unemployed
    housing_pe,   # % of households in group "Unaffordable Housing" (>30% inc.)
    traffic_pe,   # % of pop. near heavy traffic roadways
    diesel,       # NOx concentration
    ozone,        # Ozone concentration
    PM25,         # Concentration of Particulate Matter in air
    toxic_rele,   # Toxic release from factories
    hazardous_,   # Hazardous Waste Treatment Storage and Disposal Facilities
    lead_perce,   # Measure of Lead paint in houses
    superfund,    # Proximity to contaminated sites on national list
    facilities,   # Proximity to Risk Management Plan Facilities
    wastewater,   # Proximity to wastewater facilities
    sen_pop_pe,   # % population over 65
    socio_perc    # Score social economic determinants, low best
  )

# head
head(kc_wadoh_map)

```

```{r}
names(kc_wadoh_map)

```

## iii. Transponer kartet til projeksjonen EPSG:2926

```{r}

# Transponerer kartet til projeksjonen EPSG:2926
kc_wadoh_map <- st_transform(kc_wadoh_map, crs = 2926)

# Sjekk projeksjonen
st_crs(kc_wadoh_map)

```

## iv. Lag inntektsvariabelen som beskrevet ovenfor. Legg disse til som nye variabler i WADOH King County.

```{r}
install.packages("foreign")
library(foreign)

install.packages("dplyr")
library(dplyr)

# Angir filstien
file_path <- "~/Desktop/boligøkonomi/acs_b19101_familyincome.dbf"

# Laster data
income_data <- read.dbf("MapsData/acs_b19101_familyincome.dbf")
```

```{r}
# inntektsgrupper
income_data <- income_data %>%
  mutate(
    low_income = E19101137 + E19101138 + E19101139 + E19101140 + E19101141,
    mid_income = E19101142 + E19101143 + E19101144 + E19101145 + E19101146,
    high_income = E19101147 + E19101148 + E19101149 + E19101150 + E19101151
  )

```

```{r}
# Total antall familier
income_data <- income_data %>%
  mutate(
    total_families = low_income + mid_income + high_income,
    perc_low_income = (low_income / total_families) * 100,
    perc_mid_income = (mid_income / total_families) * 100,
    perc_high_income = (high_income / total_families) * 100
  )
```

```{r}
install.packages("sf")
library(sf)
library(dplyr)

# CRS for income_data_sf til EPSG:2926
st_crs(income_data_sf) <- st_crs(kc_wadoh_map)

# spatial join
kc_wadoh_map <- st_join(kc_wadoh_map, income_data_sf, by = c("GEO_ID_TRT" = "GEOIDTRT"))

# Konverter income_data til sf
income_data_sf <- income_data %>%
  mutate(dummy_geometry = st_sfc(st_point(c(NA_real_, NA_real_)))) %>%
  st_as_sf()

```

## v. Last ned shape filene tracts10 fra censusSHP mappen (vær nøye med at dere velger 10 varianten)

```{r}
library(sf)

# Angir filstien
file_path <- "~/Desktop/boligøkonomi/censusSHP/tracts10.shp"

# Laster data
tracts10 <- st_read("MapsData/censusSHP/tracts10.shp")

# head
head(tracts10)

```

## vi. Bruk en `left_join()` for å få dataene fra WADOH King County inn i dette kartet.

```{r}
# Transformer tracts10 til CRS kc_wadoh_map
tracts10 <- st_transform(tracts10, st_crs(kc_wadoh_map))

```

```{r}
library(dplyr)
library(sf)

# Fjern geometrikolonnen fra `kc_wadoh_map`
kc_wadoh_data <- kc_wadoh_map %>% st_drop_geometry()

# leftjoin
tracts10 <- tracts10 %>%
  left_join(kc_wadoh_data, by = "GEO_ID_TRT")

```

## vii. Transponer begge kartene til EPSG:2926

```{r}
library(sf)

# Transponer til EPSG:2926
tracts10 <- st_transform(tracts10, crs = 2926)

# Transponer  til EPSG:2926
kc_wadoh_map <- st_transform(kc_wadoh_map, crs = 2926)

# sjekker kartene
st_crs(tracts10)
st_crs(kc_wadoh_map)

```

# 3. Gjør en «spatial join» av husdata med tracts10

## i. Sjekk områdevariablene fra WADOH vha. summary for tracts10

```{r}
# Sjekk områdevariablene fra WADOH for tracts10
summary(tracts10)

```

## ii. En observasjon fra tracts10 har bare NA for områdevariablene. Dropp denne.

```{r}
library(tidyr)

# Fjern NA-verdier
tracts10 <- tracts10 %>%
  drop_na(any_of(c("EHD_percen", "linguist_2", "poverty_pe", "transporta", 
                   "unemploy_2", "housing_pe", "traffic_pe", "diesel", 
                   "ozone", "PM25", "toxic_rele", "hazardous_", 
                   "lead_perce", "superfund", "facilities", 
                   "wastewater", "sen_pop_pe", "socio_perc")))

```

## iii. Lag en faktor-variabel av år og måned ut fra Date, kall den year_month.

```{r}
names(kc_house_sf_2926)

```

```{r}

# faktorvariabel år og måned
kc_house_sf_2926 <- kc_house_sf_2926 %>%
  mutate(year_month = factor(format(date, "%Y-%m")))

```

## iv. Lagre .gpkg filen for husdataene . (Sett opsjonen append=FALSE. Ellers får dere ikke lov til å overskrive filen.)

```{r}

# Lagre husdataene som GeoPackage-fil
st_write(kc_house_sf_2926, "kc_house_data.gpkg", append = FALSE)

```

# 7.Spatial Regressions

## i. Last gruppens utvalg fra relevant .gpkg fil (tallene er seed verdiene som er brukt for å genererer utvalgene)

```{r}
library(sf)

# Laster inn data
kc_house_data_7654 <- st_read("MapsData/kc_house_data_7654.gpkg")

# head
head(kc_house_data_7654)
```

## ii. Legg områdevariablene til det reduserte datasettet.

```{r}
# datasett
st_crs(kc_house_data_7654)
st_crs(tracts10)
```

```{r}
# Transformerer datasettene
kc_house_data_7654 <- st_transform(kc_house_data_7654, crs = 2926)
tracts10 <- st_transform(tracts10, crs = 2926)

# områdevariabler
kc_house_data_with_tracts <- st_join(kc_house_data_7654, tracts10)

# variabelnavn
names(kc_house_data_with_tracts)
summary(kc_house_data_with_tracts)


```

## iii. Formuler modellen dere vil bruke. Kjør den som lm (OLS) modell og bruk `lm.morantest()` og `moran.plot()` på residualene for å avgjøre om vi har *uforklarte spatial effects* i residualene.

```{r}
install.packages("spdep")
library(spdep)

# OLS modell
model_ols <- lm(mod_formula, data = kc_house_data_with_tracts)

# Oppsummering
summary(model_ols)

# Test for spatial autokorrelasjon
lm_moran <- lm.morantest(model_ols, listw_k10)

# moran plot
moran.plot(residuals(model_ols), listw_k10)

# Print morans i test
print(lm_moran)

```

## iv. Modellen skal inneholde områdevariablene familieinntekt og variabelen som angir etnisitet (rase).

```{r}
# formel
mod_formel <- price ~ sqft_living + bedrooms + bathrooms + floors + yr_built + 
               inc_fam_tot + POC_percen

model_ols <- lm(mod_formel, data = kc_house_data_with_tracts)
summary(model_ols)

# lm moran test
lm_moran_test <- lm.morantest(model_ols, listw_k10)
print(lm_moran_test)

# Moran plot
moran.plot(residuals(model_ols), listw_k10)

```

## v. Generer vektmatrise ut fra k=3 og k=10 nærmeste naboer

```{r}
library(spdep)

# koordinater fra spatial data
coords <- st_coordinates(kc_house_data_with_tracts)

# vektmatrise for de 3 nærmeste naboene
nb_k3 <- knn2nb(knearneigh(coords, k = 3))
listw_k3 <- nb2listw(nb_k3, style = "W")

# vektmatrise for de 10 nærmeste naboene
nb_k10 <- knn2nb(knearneigh(coords, k = 10))
listw_k10 <- nb2listw(nb_k10, style = "W")

# matrisene
summary(listw_k3)
summary(listw_k10)

```

## vi. Bruk Anselin ([1988](https://msb205.netlify.app/assignment/kc_h24/assignment_text_24#ref-Anselin1988)) sin teknikk med Lagrange Multiplikator test vha. `lm.LMtests()`

```{r}
# LM test
lm_tests <- lm.LMtests(model_ols, listw, test = "all")
print(lm_tests)
```

## vi. Diskuter hvilken modell (SAR, SEM eller lm (OLS)) som synes å være den beste.

Ved å analysere boligpriser vurderes her romlige avhengigheter, da priser i ett område kan påvirkes av priser i nærliggende områder. En enkel OLS-modell ignorerer slike romlige effekter, noe som kan føre til skjevheter, i dette tilfeller viser moran i-test for OLS at p-verdi er \< 0,05, som indikerer at OLS-modellen ikke klarer å fange opp de romlige avhengighetene i dataene.

SEM modellen viser romlig autokorrelasjon i feilleddene, noe som kan oppstå når det er romlig korrelerte faktorer som ikke er inkludert i modellen. SAR modellen tar hensyn til romlig avhengighet i den avhengige variabelen ved å inkludere en lagget versjon som en forklaringsvariabel. Dette kan være nyttig når boligprisene direkte påvirkes av priser i nærliggende områder.

For boligprisanalyse er det ofte hensiktsmessig å starte med en SAR modell, da boligpriser typisk påvirkes av priser i nærliggende områder. Hvis det fortsatt er romlig autokorrelasjon i residualene etter å ha brukt SAR, kan det være nødvendig å vurdere en SEM modell eller en kombinasjon av begge.

## vii. Bruk så teknikken med nestede modeller anbefalt av LeSage ([n.d.](https://msb205.netlify.app/assignment/kc_h24/assignment_text_24#ref-lesage)). Diskuter først om vi står overfor et *lokalt* eller *globalt* fenomen. Bruk opsjonen `durban = as.formula(~ variabelnavnene du vil ha impacts for)`. Dette for å slippe impacts for tidsdummiene. Test så de nestede modellne vha. *likelihood ratio test*. Hvilken modell synes å være den beste?

I ett boligmarked kan det være både blanding av lokale og globale effekter. En lokal tilnærming ser på nabolagseffekter, mens globale fenomen er når markedsforholdene påvirker en hel region. slide 27. Morans i-test viser sterk spatial autokorrelasjon, som støtter romlige interaksjoner som indikerer at det er ett lokalt fenomen.

```{r}
install.packages("spatialreg")
library(spatialreg)
```

```{r}
# Formel
mod_formel2 <- price ~ sqft_living + bedrooms + bathrooms + floors + inc_fam_tot + POC_percen
```

```{r}
# SDEM modell
sdem_model <- errorsarlm(mod_formel2, 
                         data = kc_house_data_with_tracts, 
                         listw = listw_k10, 
                         Durbin = TRUE)

# SLX modell
slx_model <- lmSLX(mod_formel2, 
                   data = kc_house_data_with_tracts, 
                   listw = listw_k10)

# SEM modell
sem_model <- errorsarlm(mod_formel2, 
                        data = kc_house_data_with_tracts, 
                        listw = listw_k10, 
                        Durbin = FALSE)

# OLS modellen
ols_model <- lm(mod_formel2, data = kc_house_data_with_tracts)

# Oppsummere
summary(sdem_model)
summary(slx_model)
summary(sem_model)
summary(ols_model)

```

```{r}
library(lmtest)

# SDEM vs SLX
lrtest_sdem_slx <- LR.Sarlm(sdem_model, slx_model)

# SDEM vs SEM
lrtest_sdem_sem <- LR.Sarlm(sdem_model, sem_model)

# SEM vs OLS
lrtest_sem_ols <- LR.Sarlm(sem_model, ols_model)

# SLX vs OLS
lrtest_slx_ols <- lmtest::lrtest(slx_model, ols_model)

# Print resultatene
print("SDEM vs SLX:")
print(lrtest_sdem_slx)

print("SDEM vs SEM:")
print(lrtest_sdem_sem)

print("SEM vs OLS:")
print(lrtest_sem_ols)

print("SLX vs OLS:")
print(lrtest_slx_ols)
```

```{r}
# impacts for SDEM
sdem_impacts <- impacts(sdem_model, 
                        listw = listw_k10, 
                        durbin = as.formula(price ~ sqft_living + bedrooms + bathrooms + 
                                            floors + yr_built + inc_fam_tot + POC_percen))

summary(sdem_impacts)

# impacts for SLX
slx_impacts <- impacts(slx_model, 
                       listw = listw_k10, 
                       durbin = as.formula(~ sqft_living + bedrooms + bathrooms + 
                                           floors + yr_built + inc_fam_tot + POC_percen))

summary(slx_impacts)
```

SDEM modellen synes å være den beste basert på både likelihood ratio test og impacts test da den er signifikant for flere variabler, slik som sqdr_living, bedrooms, P0C_percen og inc_fam tot. Dette gir også nformasjon om mer indirekte effekter som lokale spillover effekter.

## viii. For alternativet k=10 (10 nærmeste naboer). Bruk `moran.plot()` på residualene fra de ulike modellene for å illustrere hvor godt hver modell fjerner «spatial effects» fra residualene.

```{r}
library(spdep)

# Koordinat
coords <- st_coordinates(kc_house_data_with_tracts)

# 10 nærmeste naboer
nb_k10 <- knn2nb(knearneigh(coords, k = 10))

# vektmatrise
listw_k10 <- nb2listw(nb_k10, style = "W")

```

```{r}
# OLS modell
ols_model <- lm(mod_formula, data = kc_house_data_with_tracts)

# residualer
residuals_ols <- residuals(ols_model)

moran.plot(residuals_ols, listw_k10, main = "Morans OLS test")
```

```{r}
# SAR modell
sar_model <- lagsarlm(mod_formula, data = kc_house_data_with_tracts, listw = listw_k10, type = "lag")

# Residualer
residuals_sar <- residuals(sar_model)

moran.plot(residuals_sar, listw_k10, main = "Morans i test SAR")

```

```{r}
# SEM
sem_model <- errorsarlm(mod_formula, data = kc_house_data_with_tracts, listw = listw_k10)

# Residualer
residuals_sem <- residuals(sem_model)

moran.plot(residuals_sem, listw_k10, main = "Morans i test SEM")
```

```{r}
# SDM
sdm_model <- lagsarlm(mod_formula, data = kc_house_data_with_tracts, listw = listw_k10, type = "Durbin")

# Residualer
residuals_sdm <- residuals(sdm_model)

moran.plot(residuals_sdm, listw_k10, main = "Moran i test SDM")
```

\-
